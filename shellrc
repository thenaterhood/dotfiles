#
# Author: Nate Levesque <public@thenaterhood.com>
# Filename: bashrc
# Language: Shell
#
#####################################################
# Check if running interactively (we don't want to
# do these things if we are not)
#####################################################
[[ $- != *i* ]] && return

#####################################################
# Configure the terminal
#####################################################
export EDITOR=vim

#####################################################
#   Sets the bash color codes to english variables
#####################################################
NORMAL="\[\033[0m\]"
RED="\[\033[31;1m\]"
GREEN="\[\033[1;32m\]"
BLUE="\[\033[34;1m\]"
CYAN="\[\033[0;36m\]"
DYELLOW="\[\033[0;33m\]"
BOLD_YELLOW="\[\033[33;1m\]"
altred="\033[1;31m"
BGGREEN="\e[30;48;5;82m"
BGBLUE="\e[30;48;5;39m"
BGYELLOW="\e[30;48;5;11m"

#####################################################
# Sets a few prelimary variables for later commands
#####################################################
shellzilla=~/bin/shellzilla
ROOT_UID=0

is_ssh=0
if [ "$SSH_CONNECTION" != "" ]; then
        is_ssh=1
fi
#####################################################
# Displays a greeting on shell start
#####################################################
hour=`date +%H`

# Decides which greeting to use, depending on time of day
if [ $hour -ge 0 -a $hour -lt 12 ]; then
	greeting="Good morning! You are on `hostname`."
elif [ $hour -ge 12 -a $hour -lt 19 ]; then
	greeting="Good afternoon! You are on `hostname`."
else
	greeting="Good evening! You are on `hostname`."
fi

# Displays the greeting
echo -e "$altred$greeting"
echo -e "Current time is `date +%T`, today is `date +%A`.\n"

#####################################################
# Functions to make life easier
#####################################################

# Make an empty git repo with readme, license and gitignore
# and create a single commit
mkGit(){
	# Sets up a git repository skeleton
	# with an initial README, LICENSE, and
	# .gitignore and performs an initial
	# commit after adding all the files.
	git init
	basename `pwd` > README.md
	echo -e "============" >> README.md
	echo -e '__pycache__' >> .gitignore
	echo -e 'bin' >> .gitignore
	echo -e 'LICENSE' >> LICENSE
	git add LICENSE README.md .gitignore
	git commit -m "Create repository skeleton"
}

ufsshfs(){
	# Forcibly kills and unmounts an SSHFS
	# endpoint, caused by unfortunate events
	# where SSHFS has essentially crashed for
	# an endpoint.
	killall -KILL sshfs
	fusermount -u $1
}

#####################################################
# Changes the prompt text and colors
# See bash man page for codes
#####################################################

# Configure the prompt depending on bash or zsh
RUNNING_SHELL=`readlink -f /proc/$$/exe`

case `basename $RUNNING_SHELL` in
	"bash"|"-bash")

	ROOTPRMT="$RED\h $RED\\w\\$ $NORMAL"
	USERPRMT="$NORMAL$CYAN\u@\h $NORMAL$DYELLOW\\w\n$NORMAL→ "
	if [ $is_ssh -eq 1 ]; then
		USERPRMT="$NORMAL$BOLD_YELLOW\u@\h $NORMAL$DYELLOW\\w\n$NORMAL→ "
	fi
	;;

	"zsh" | "zsh4" )
	# Make the special keys (home/del/end) work
	bindkey -v
	eval "$(sed -n 's/^/bindkey /; s/: / /p' /etc/inputrc)" &>/dev/null

	# Set up the shell
	autoload -U colors && colors
	zstyle ':completion:*' completer _complete _ignored _approximate
	zstyle :compinstall filename $HOME/.zshrc

	autoload -Uz compinit
	compinit
	bindkey -v
	bindkey "^R" history-incremental-search-backward
	HISTSIZE=5000
	setopt APPEND_HISTORY
	SAVEHIST=5000
	HISTFILE=~/.zsh_histfile
	ROOTPRMT="%{$fg[red]%}%m %~ #%{$reset_color%}"
	USERPRMT="%{$reset_color%}%{$fg[cyan]%}%n@%m:%{$reset_color%}%{$fg[yellow]%} %~ zsh"$'\n'"%{$reset_color%}→ "
	if [ $is_ssh -eq 1 ]; then
		USERPRMT="%{$fg_bold[yellow]%}%n@%m:%{$reset_color%}%{$fg[yellow]%} %~ zsh"$'\n'"%{$reset_color%}→ "
	fi
	;;

esac

# Apply the actual prompts for root and users
if [ "$UID" -eq "$ROOT_UID" ]; then
	PS1="$ROOTPRMT"
else
	PS1="$USERPRMT"
fi

#####################################################
# General aliases to shorten commands/make other OS
# commands available (coming fron windows)
#####################################################
alias sl='ls -lr'
alias ll='ls -lh'
alias la='ls -a'
alias lal='ls -alh'
alias quit='exit'
alias cls='clear'
alias ..='cd ..'
alias KILLITWITHFIRE='killall -KILL'

alias rgr='grep -Rn --color=auto'

alias dfh='df -h'
alias dft='df -T'
alias usshfs='fusermount -u'

alias py='python'
alias py2='python2'

alias gitstat='git status'
alias gitcom='git commit'
alias mkgit='mkGit'
alias gitpul='git pull'
alias gitpush='git push'
alias gush='git push'
alias gull='git pull'
alias greb='git rebase'
alias gdiff='git diff'
alias getch='git fetch'
alias gatch='git fetch --all'

#####################################################
# Typo-related aliases
#####################################################
alias pgp='gpg'
alias fidget='figlet'
alias csv='cvs'

#####################################################
# Application-related shortcuts for accidentally
# using vim/whatever commands in bash
#####################################################
alias :q='exit'

#####################################################
# Aliases to call scripts (found in shellzilla repo)
#####################################################
alias displays='bash $shellzilla/display_configurator.sh'
alias touchpad='bash $shellzilla/touchpad_switch.sh'
alias rip='bash $shellzilla/audio_ripper.sh'
alias backup='$shellzilla/system_backup.sh'
alias suspend='bash $shellzilla/suspend.sh'
alias volup='bash $shellzilla/volumeControl.sh up'
alias voldwn='bash $shellzilla/volumeControl.sh down'
alias volmute='bash $shellzilla/volumeControl.sh mute'

#####################################################
# Distro/software specific commands
#####################################################
alias sign='pgp --detach-sign'
alias verify='pgp --verify'

# Arch
alias Syu='sudo pacman -Syu'
alias pacS='sudo pacman -S'
alias pacR='sudo pacman -Rs'
alias pacs='pacman -Ss'
alias Syua='yaourt -Syua'

